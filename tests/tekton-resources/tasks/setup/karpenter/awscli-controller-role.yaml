apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: awscli-controller-role
  namespace: scalability
spec:
  description: |
    Creates the karpenter Controller Role
  results:
  - name: node-role-arn
    description: Stores the controller role arn created by the task
  params:
  - name: cluster-name
    description: The name of the cluster
  - name: endpoint
    description: endpoint
  - name: aws-region
    description: region
    default: us-west-2
  - name: aws-account-id
    description: account id
  - name: aws-partition
    description: partition
    default: aws
  - name: karpenter-controller-role-trust-policy-url
    default: https://raw.githubusercontent.com/DerekFrank/kubernetes-iteration-toolkit/refs/heads/main/tests/assets/karpenter/controller-role-trust-policy-document.json
  - name: karpenter-controller-role-policy-url
    default: https://raw.githubusercontent.com/DerekFrank/kubernetes-iteration-toolkit/refs/heads/main/tests/assets/karpenter/controller-role-policy-document.json
  workspaces:
  - name: source
    mountPath: /src/karpenter/
  steps:
  - name: create-role
    image: alpine/k8s:1.23.7
    script: |
      echo "Starting controller role"
      export RAW_OIDC_ENDPOINT="$(aws eks --endpoint $(params.endpoint) describe-cluster --name "$(params.cluster-name)" \
        --query "cluster.identity.oidc.issuer" --output text)"
      export OIDC_ID=$(aws eks --endpoint $(params.endpoint) describe-cluster --name $(params.cluster-name) --region $(params.aws-region) --query "cluster.identity.oidc.issuer" --output text | cut -d '/' -f 5)
      export AWS_PARTITION=$(params.aws-partition)
      export AWS_ACCOUNT_ID=$(params.aws-account-id)
      export AWS_REGION=$(params.aws-region)
      export CLUSTER_NAME=$(params.cluster-name)
      echo $RAW_OIDC_ENDPOINT
      echo $OIDC_ID

      export OIDC_ENDPOINT=$(echo ${RAW_OIDC_ENDPOINT#*//})

      echo $OIDC_ENDPOINT

      curl -fsSL $(params.karpenter-controller-role-trust-policy-url) -o $(workspaces.source.path)karpenter-controller-role-trust-policy-url.json
      
      envsubst < $(workspaces.source.path)karpenter-controller-role-trust-policy-url.json > $(workspaces.source.path)karpenter-controller-role-trust-policy-url-modified.json

      cat $(workspaces.source.path)karpenter-controller-role-trust-policy-url.json

      cat $(workspaces.source.path)karpenter-controller-role-trust-policy-url-modified.json
      
      aws iam create-role --role-name "KarpenterControllerRole-$(params.cluster-name)" \
        --assume-role-policy-document file://$(workspaces.source.path)karpenter-controller-role-trust-policy-url-modified.json

      curl -fsSL $(params.karpenter-controller-role-policy-url) -o $(workspaces.source.path)karpenter-controller-role-policy-url.json

      envsubst < $(workspaces.source.path)karpenter-controller-role-policy-url.json > $(workspaces.source.path)karpenter-controller-role-policy-url-modified.json
      
      cat $(workspaces.source.path)karpenter-controller-role-policy-url-modified.json

      aws iam put-role-policy --role-name "KarpenterControllerRole-$(params.cluster-name)" \
        --policy-name "KarpenterControllerPolicy-$(params.cluster-name)" \
        --policy-document file://$(workspaces.source.path)karpenter-controller-role-policy-url-modified.json