apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-ec2nodeclass
  namespace: karpenter
spec:
  description: |
    Install karpenter on the cluster
  params:
  - name: cluster-name
    description: The name of the cluster
  - name: node-role-arn
    description: 
  steps:
  - name: create-ec2nodeclass
    image: alpine/k8s:1.23.7
    script: |
      CLUSTER_CA=$(aws eks describe-cluster \
          --name $(params.cluster-name) \
          --endpoint-url https://api.beta.us-west-2.wesley.amazonaws.com \
          --query 'cluster.certificateAuthority.data' \
          --output text)


      CLUSTER_ENDPOINT=$(aws eks describe-cluster \
          --name $(params.cluster-name) \
          --endpoint-url https://api.beta.us-west-2.wesley.amazonaws.com \
          --query 'cluster.endpoint' \
          --output text)

      echo "Cluster endpoint: ${CLUSTER_ENDPOINT}"


      cat <<EOF | kubectl apply -f -
      apiVersion: karpenter.k8s.aws/v1
      kind: EC2NodeClass
      metadata:
        name: $(params.cluster-name)
      spec:
        amiFamily: Custom
        instanceProfile: "KarpenterNodeInstanceProfile-$(params.cluster-name)"
        amiSelectorTerms:
          - alias: "al2023@${ALIAS_VERSION}"
        subnetSelectorTerms:
          - tags:
              karpenter.sh/discovery: "$(params.cluster-name)"
          - tags:
              aws:cloudformation:stack-name: "$(params.cluster-name)"
        securityGroupSelectorTerms:
          - tags:
              karpenter.sh/discovery: "$(params.cluster-name)"
          - tags:
              aws:cloudformation:stack-name: "$(params.cluster-name)"
          - tags:
              kubernetes.io/cluster/$(params.cluster-name): owned
        kubelet:
          maxPods: 110
          systemReserved:
            cpu: 100m
            memory: 100Mi
            ephemeral-storage: 1Gi
          kubeReserved:
            cpu: 100m
            memory: 100Mi
            ephemeral-storage: 1Gi
          evictionHard:
            memory.available: 5%
            nodefs.available: 10%
            nodefs.inodesFree: 10%
        userData: |
          MIME-Version: 1.0
          Content-Type: multipart/mixed; boundary="BOUNDARY"

          --BOUNDARY
          Content-Type: application/node.eks.aws

          apiVersion: node.eks.aws/v1alpha1
          kind: NodeConfig
          spec:
            cluster:
              name: $(params.cluster-name)
              apiServerEndpoint: ${CLUSTER_ENDPOINT}  # Using the actual cluster endpoint
              certificateAuthority: ${CLUSTER_CA}
              cidr: "172.20.0.0/16"
            kubelet:
              config:
                nodeStatusReportFrequency: "60m"
                nodeLeaseDurationSeconds: 60
                maxPods: 110
                clusterDNS: ["172.20.0.10"]
              flags:
                - --node-labels=karpenter.sh/capacity-type=on-demand,karpenter.sh/nodepool=titan-pool
                - --register-with-taints=karpenter.sh/unregistered:NoExecute
          --BOUNDARY--
      EOF