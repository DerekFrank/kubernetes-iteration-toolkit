---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: node-condition-wait
  namespace: scalability
spec:
  description: "waits for there to be no nodes with the specific condition"
  params:
  - name: cluster-name
    description: The name of the cluster
  - name: endpoint
    description: eks endpoint to use
  - name: aws-region
  - name: initial-delay
    default: 30m
  - name: condition
    description: condition to check
  - name: value
    description: value of the condition to validate
  steps:
  - name: drift-nodepool
    image: amazon/aws-cli
    script: |
      sleep $(params.initial-delay)
      CHECK_INTERVAL=300
      while true; do
        aws eks update-kubeconfig --name $(params.cluster-name) --endpoint $(params.endpoint)
        echo "$(date): Checking node conditions..."
        # Get nodes that still have the unwanted condition
        nodes_with_condition=$(kubectl get nodes -o json | jq -r --arg type $(params.condition) --arg status $(params.value) '
           .items[] |
           select(.status.conditions[] | select(.type == $type and .status == $status)) |
           .metadata.name
        ')
        if [ -z "$nodes_with_condition" ]; then
          echo "$(date): All nodes are clear of condition $(params.condition)=$(params.value)"
          echo "Condition check completed successfully!"
          exit 0
        else
          echo "$(date): The following nodes still have $(params.condition)=$(params.value):"
          echo "$nodes_with_condition"
          echo "Waiting 5 minutes before next check..."
          sleep $CHECK_INTERVAL
        fi
      done

      exit 1

